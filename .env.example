#!/usr/bin/env python3
"""
Personal AI Assistant
Main application entry point with WhatsApp, Telegram integration
"""

import os
import sys
from dotenv import load_dotenv
import logging
from flask import Flask, request

# Import handlers
from handlers.telegram_handler import TelegramHandler
from handlers.whatsapp_handler import WhatsAppHandler
from handlers.ai_handler import AIHandler
from utils.file_manager import FileManager
from utils.task_automation import TaskAutomation
from config import Config

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

# Initialize Flask app for webhooks
app = Flask(__name__)

# Initialize handlers
config = Config()
telegram_handler = TelegramHandler(config.TELEGRAM_BOT_TOKEN)
whatsapp_handler = WhatsAppHandler(config.TWILIO_ACCOUNT_SID, config.TWILIO_AUTH_TOKEN)
ai_handler = AIHandler(config.OPENAI_API_KEY)
file_manager = FileManager()
task_automation = TaskAutomation()


@app.route('/')
def home():
    """Health check endpoint"""
    return {'status': 'AI Assistant is running', 'version': '1.0.0'}


@app.route('/webhook/telegram', methods=['POST'])
def telegram_webhook():
    """Handle incoming Telegram messages"""
    try:
        data = request.get_json()
        logger.info(f"Received Telegram webhook: {data}")
        
        # Process message with AI
        if 'message' in data:
            message_text = data['message'].get('text', '')
            chat_id = data['message']['chat']['id']
            
            # Get AI response
            ai_response = ai_handler.generate_response(message_text)
            
            # Send response via Telegram
            telegram_handler.send_message(chat_id, ai_response)
        
        return {'status': 'success'}
    except Exception as e:
        logger.error(f"Error processing Telegram webhook: {e}")
        return {'status': 'error', 'message': str(e)}, 500


@app.route('/webhook/whatsapp', methods=['POST'])
def whatsapp_webhook():
    """Handle incoming WhatsApp messages"""
    try:
        data = request.form
        logger.info(f"Received WhatsApp webhook: {data}")
        
        message_text = data.get('Body', '')
        from_number = data.get('From', '')
        
        # Get AI response
        ai_response = ai_handler.generate_response(message_text)
        
        # Send response via WhatsApp
        whatsapp_handler.send_message(from_number, ai_response)
        
        return {'status': 'success'}
    except Exception as e:
        logger.error(f"Error processing WhatsApp webhook: {e}")
        return {'status': 'error', 'message': str(e)}, 500


def send_test_message():
    """Send test messages to verify setup"""
    try:
        # Test Telegram
        if config.TELEGRAM_CHAT_ID:
            telegram_handler.send_message(
                config.TELEGRAM_CHAT_ID,
                "ðŸ¤– AI Assistant is now online!"
            )
            logger.info("Test message sent via Telegram")
        
        # Test WhatsApp
        if config.YOUR_WHATSAPP_NUMBER:
            whatsapp_handler.send_message(
                config.YOUR_WHATSAPP_NUMBER,
                "ðŸ¤– AI Assistant is now online!"
            )
            logger.info("Test message sent via WhatsApp")
    
    except Exception as e:
        logger.error(f"Error sending test messages: {e}")


def main():
    """Main application function"""
    logger.info("Starting Personal AI Assistant...")
    
    # Validate configuration
    if not config.validate():
        logger.error("Configuration validation failed. Please check your .env file.")
        sys.exit(1)
    
    logger.info("Configuration validated successfully")
    
    # Send test messages
    send_test_message()
    
    # Start scheduled tasks
    task_automation.start()
    
    # Get port from environment or use default
    port = int(os.environ.get('PORT', 8000))
    
    logger.info(f"AI Assistant started on port {port}")
    logger.info("Webhook endpoints:")
    logger.info(f"  - Telegram: /webhook/telegram")
    logger.info(f"  - WhatsApp: /webhook/whatsapp")
    
    # Run Flask app
    app.run(host='0.0.0.0', port=port, debug=False)


if __name__ == '__main__':
    main()
